/** @module tgrid.protocols.workers */
import { Communicator } from "../../components/Communicator";
import { IWorkerSystem } from "./internal/IWorkerSystem";
import { IAcceptor } from "../internal/IAcceptor";
import { Invoke } from "../../components/Invoke";
/**
 * SharedWorker acceptor for client.
 *  - available only in Web Browser.
 *
 * The `SharedWorkerAcceptor` is a communicator class communicating with the remote client
 * ({@link SharedWorkerConnector}) using RFC (Remote Function Call). The `SharedAcceptor`
 * objects are always created by the {@link SharedWorkerServer} class whenever a remote client
 * connects to its server.
 *
 * To accept connection and start interaction with the remote client, call the {@link accept}()
 * method with special `Provider`. Also, don't forget to closing the connection after your
 * business has been completed.
 *
 * @type Headers Type of headers containing initialization data like activation.
 * @type Provider Type of features provided for remote system.
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare class SharedWorkerAcceptor<Headers extends object, Provider extends object | null> extends Communicator<Provider | null | undefined> implements IWorkerSystem, IAcceptor<SharedWorkerAcceptor.State, Headers, Provider> {
    /**
     * @hidden
     */
    private port_;
    /**
     * @hidden
     */
    private eraser_;
    /**
     * @hidden
     */
    private state_;
    /**
     * @hidden
     */
    private headers_;
    /**
     * @hidden
     */
    private constructor();
    /**
     * @inheritDoc
     */
    close(): Promise<void>;
    /**
     * @hidden
     */
    private _Close;
    /**
     * @inheritDoc
     */
    get state(): SharedWorkerAcceptor.State;
    /**
     * @inheritDoc
     */
    get headers(): Headers;
    /**
     * @inheritDoc
     */
    accept(provider?: Provider | null): Promise<void>;
    /**
     * Reject connection.
     *
     * Reject without acceptance, any interaction. The connection would be closed immediately.
     *
     * @param reason Detailed reason of the rejection. Default is "Rejected by server".
     */
    reject(reason?: string): Promise<void>;
    /**
     * @hidden
     */
    protected sendData(invoke: Invoke): void;
    /**
     * @hidden
     */
    protected inspectReady(method: string): Error | null;
    /**
     * @hidden
     */
    private _Handle_message;
}
export declare namespace SharedWorkerAcceptor {
    export import State = IAcceptor.State;
}
//# sourceMappingURL=SharedWorkerAcceptor.d.ts.map