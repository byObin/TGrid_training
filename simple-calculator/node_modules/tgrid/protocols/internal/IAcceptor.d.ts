/** @module tgrid.protocols */
import { IState } from "./IState";
export interface IAcceptor<State extends IAcceptor.State, Headers extends object, Provider extends object | null> extends IState<State> {
    /**
     * Headers containing initialization data like activation.
     */
    headers: Headers;
    /**
     * Accept connection.
     *
     * Accept, permit the client's, connection with this server and start interaction.
     *
     * @param provider An object providing features to remote system.
     */
    accept(provider: Provider | null): Promise<void>;
}
export declare namespace IAcceptor {
    const enum State {
        REJECTING = -2,
        NONE = -1,
        ACCEPTING = 0,
        OPEN = 1,
        CLOSING = 2,
        CLOSED = 3
    }
    function inspect(state: State, method: string): Error | null;
}
//# sourceMappingURL=IAcceptor.d.ts.map