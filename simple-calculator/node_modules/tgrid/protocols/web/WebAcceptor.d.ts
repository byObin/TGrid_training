import { Communicator } from "../../components/Communicator";
import { IWebCommunicator } from "./internal/IWebCommunicator";
import { IAcceptor } from "../internal/IAcceptor";
import { Invoke } from "../../components/Invoke";
/**
 * Web Socket Acceptor.
 *  - available only in NodeJS.
 *
 * The `WebAcceptor` is a communicator class interacting with the remote (web socket) client
 * using RFC (Remote Function Call). The `WebAcceptor` objects are always created by the
 * {@link WebServer} class whenever a remote client connects to its server.
 *
 * To accept connection and start interaction with the remote client, call the {@link accept}()
 * method with special `Provider`. Also, don't forget to closing the connection after your
 * busines has been completed.
 *
 * @type Headers Type of headers containing initialization data like activation.
 * @type Provider Type of features provided for remote system.
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare class WebAcceptor<Headers extends object, Provider extends object | null> extends Communicator<Provider | null | undefined> implements IWebCommunicator, IAcceptor<WebAcceptor.State, Headers, Provider> {
    /**
     * @hidden
     */
    private state_;
    /**
     * @hidden
     */
    private request_;
    /**
     * @hidden
     */
    private socket_;
    /**
     * @hidden
     */
    private headers_;
    /**
     * @hidden
     */
    private constructor();
    /**
     * @inheritDoc
     */
    close(code?: number, reason?: string): Promise<void>;
    /**
     * @hidden
     */
    protected destructor(error?: Error): Promise<void>;
    get ip(): string;
    get path(): string;
    /**
     * @inheritDoc
     */
    get state(): WebAcceptor.State;
    /**
     * @inheritDoc
     */
    get headers(): Headers;
    /**
     * @inheritDoc
     */
    accept(provider?: Provider | null): Promise<void>;
    /**
     * Reject connection.
     *
     * Reject without acceptance, any interaction. The connection would be closed immediately.
     *
     * @param status Status code.
     * @param reason Detailed reason to reject.
     */
    reject(status?: number, reason?: string): Promise<void>;
    /**
     * @hidden
     */
    protected sendData(invoke: Invoke): void;
    /**
     * @hidden
     */
    protected inspectReady(method: string): Error | null;
    /**
     * @hidden
     */
    private _Handle_message;
    /**
     * @hidden
     */
    private _Handle_close;
}
export declare namespace WebAcceptor {
    export import State = IAcceptor.State;
}
//# sourceMappingURL=WebAcceptor.d.ts.map