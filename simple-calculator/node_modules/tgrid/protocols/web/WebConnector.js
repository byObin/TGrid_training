"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebConnector = void 0;
//================================================================ 
/** @module tgrid.protocols.web */
//================================================================
var Communicator_1 = require("../../components/Communicator");
var IConnector_1 = require("../internal/IConnector");
var WebError_1 = require("./WebError");
var once_1 = require("../internal/once");
var DomainError_1 = require("tstl/exception/DomainError");
var node_1 = require("tstl/utility/node");
var global_1 = require("tstl/thread/global");
/**
 * Web Socket Connector.
 *
 * The `WebConnector` is a communicator class who can connect to websocket server and
 * interact with it using RFC (Remote Function Call).
 *
 * You can connect to the websocket server using {@link connect}() method. The interaction
 * would be started if the server is opened by {@link WebServer.open}() and the server
 * accepts your connection by {@link WebAcceptor.accept}().
 *
 * Note that, after you business has been completed, please close the connection using
 * {@link close}() or let the server to {@link WebAcceptor.close close itself}. If you don't
 * close the connection in time, it may waste vulnerable resources of the server.
 *
 * @type Headers Type of headers containing initialization data like activation.
 * @type Provider Type of features provided for remote system.
 * @author Jeongho Nam - https://github.com/samchon
 */
var WebConnector = /** @class */ (function (_super) {
    __extends(WebConnector, _super);
    /* ----------------------------------------------------------------
        CONSTRUCTOR
    ---------------------------------------------------------------- */
    /**
     * Initializer Constructor.
     *
     * @param provider An object providing features for remote system.
     */
    function WebConnector(provider) {
        var _this = _super.call(this, provider) || this;
        _this.state_ = -1 /* NONE */;
        return _this;
    }
    /**
     * Connect to remote websocket server.
     *
     * Try connection to the remote websocket server with its address and waiting for the
     * server to accept the trial. If the server rejects your connection, then exception
     * would be thrown (in *Promise.catch*, as `WebError`).
     *
     * After the connection and your business has been completed, don't forget to closing the
     * connection in time to prevent waste of the server resource.
     *
     * @param url URL address to connect.
     * @param headers Headers containing initialization data like activation.
     * @param timeout Milliseconds to wait the web-socket server to accept or reject it. If omitted, the waiting would be forever.
     */
    WebConnector.prototype.connect = function (url, headers, timeout) {
        return __awaiter(this, void 0, void 0, function () {
            var exp_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // TEST CONDITION
                        if (this.socket_ && this.state !== 3 /* CLOSED */)
                            if (this.socket_.readyState === 0 /* CONNECTING */)
                                throw new DomainError_1.DomainError("Error on WebConnector.connect(): already connecting.");
                            else if (this.socket_.readyState === 1 /* OPEN */)
                                throw new DomainError_1.DomainError("Error on WebConnector.connect(): already connected.");
                            else
                                throw new DomainError_1.DomainError("Error on WebConnector.connect(): already closing.");
                        //----
                        // CONNECTION
                        //----
                        // PREPARE ASSETS
                        this.state_ = 0 /* CONNECTING */;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        // DO CONNNECT
                        this.socket_ = new g.WebSocket(url);
                        return [4 /*yield*/, this._Wait_connection()];
                    case 2:
                        _a.sent();
                        // SEND HEADERS
                        this.socket_.send(JSON.stringify(headers));
                        return [4 /*yield*/, this._Handshake(timeout)];
                    case 3:
                        // PROMISED HANDSHAKE
                        if ((_a.sent()) !== 1 /* OPEN */.toString())
                            throw new WebError_1.WebError(1008, "Error on WebConnector.connect(): target server may not be opened by TGrid. It's not following the TGrid's own handshake rule.");
                        // SUCCESS
                        this.state_ = 1 /* OPEN */;
                        {
                            this.socket_.onmessage = this._Handle_message.bind(this);
                            this.socket_.onclose = this._Handle_close.bind(this);
                            this.socket_.onerror = function () { };
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        exp_1 = _a.sent();
                        this.state_ = -1 /* NONE */;
                        if (this.socket_.readyState === 1 /* OPEN */) {
                            this.socket_.onclose = function () { };
                            this.socket_.close();
                        }
                        throw exp_1;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @hidden
     */
    WebConnector.prototype._Wait_connection = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.socket_.onopen = function () { return resolve(); };
            _this.socket_.onclose = once_1.once(function (evt) {
                reject(new WebError_1.WebError(evt.code, evt.reason));
            });
            _this.socket_.onerror = once_1.once(function () {
                reject(new WebError_1.WebError(1006, "Connection refused."));
            });
        });
    };
    /**
     * @inheritDoc
     */
    WebConnector.prototype.close = function (code, reason) {
        return __awaiter(this, void 0, void 0, function () {
            var error, ret;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        error = this.inspectReady("WebConnector.close");
                        if (error)
                            throw error;
                        ret = this.join();
                        // DO CLOSE
                        this.state_ = 2 /* CLOSING */;
                        this.socket_.close(code, reason);
                        // LAZY RETURN
                        return [4 /*yield*/, ret];
                    case 1:
                        // LAZY RETURN
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @hidden
     */
    WebConnector.prototype._Handshake = function (timeout) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var completed = false;
            var expired = false;
            // TIMEOUT
            if (timeout !== undefined)
                global_1.sleep_for(timeout).then(function () {
                    if (completed === false) {
                        reject(new WebError_1.WebError(1008, "Error on WebConnector.connect(): target server is not sending handshake data over " + timeout + " milliseconds."));
                        expired = true;
                    }
                });
            // EVENT LISTENRES
            _this.socket_.onmessage = once_1.once(function (evt) {
                if (expired === false) {
                    completed = true;
                    resolve(evt.data);
                }
            });
            _this.socket_.onclose = once_1.once(function (evt) {
                if (expired === false) {
                    completed = true;
                    reject(new WebError_1.WebError(evt.code, evt.reason));
                }
            });
            _this.socket_.onerror = once_1.once(function () {
                if (expired === false) {
                    completed = true;
                    reject(new WebError_1.WebError(1006, "Connection refused."));
                }
            });
        });
    };
    Object.defineProperty(WebConnector.prototype, "url", {
        /* ----------------------------------------------------------------
            ACCESSORS
        ---------------------------------------------------------------- */
        get: function () {
            return this.socket_ ? this.socket_.url : undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebConnector.prototype, "state", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.state_;
        },
        enumerable: false,
        configurable: true
    });
    /* ----------------------------------------------------------------
        COMMUNICATOR
    ---------------------------------------------------------------- */
    /**
     * @hidden
     */
    WebConnector.prototype.sendData = function (invoke) {
        this.socket_.send(JSON.stringify(invoke));
    };
    /**
     * @hidden
     */
    WebConnector.prototype.inspectReady = function (method) {
        return IConnector_1.IConnector.inspect(this.state, method);
    };
    /**
     * @hidden
     */
    WebConnector.prototype._Handle_message = function (evt) {
        if (typeof evt.data === "string") {
            var invoke = JSON.parse(evt.data);
            this.replyData(invoke);
        }
    };
    /**
     * @hidden
     */
    WebConnector.prototype._Handle_close = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        error = (!event.code || event.code !== 1000)
                            ? new WebError_1.WebError(event.code, event.reason)
                            : undefined;
                        this.state_ = 3 /* CLOSED */;
                        return [4 /*yield*/, this.destructor(error)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return WebConnector;
}(Communicator_1.Communicator));
exports.WebConnector = WebConnector;
(function (WebConnector) {
    WebConnector.HANDSHAKE_TIMEOUT = 5000;
})(WebConnector = exports.WebConnector || (exports.WebConnector = {}));
exports.WebConnector = WebConnector;
//----
// POLYFILL
//----
/**
 * @hidden
 */
var g = node_1.is_node()
    ? require("./internal/websocket-polyfill")
    : self;
//# sourceMappingURL=WebConnector.js.map