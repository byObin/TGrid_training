/** @module tgrid.protocols.web */
import { Communicator } from "../../components/Communicator";
import { IWebCommunicator } from "./internal/IWebCommunicator";
import { IConnector } from "../internal/IConnector";
import { Invoke } from "../../components/Invoke";
/**
 * Web Socket Connector.
 *
 * The `WebConnector` is a communicator class who can connect to websocket server and
 * interact with it using RFC (Remote Function Call).
 *
 * You can connect to the websocket server using {@link connect}() method. The interaction
 * would be started if the server is opened by {@link WebServer.open}() and the server
 * accepts your connection by {@link WebAcceptor.accept}().
 *
 * Note that, after you business has been completed, please close the connection using
 * {@link close}() or let the server to {@link WebAcceptor.close close itself}. If you don't
 * close the connection in time, it may waste vulnerable resources of the server.
 *
 * @type Headers Type of headers containing initialization data like activation.
 * @type Provider Type of features provided for remote system.
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare class WebConnector<Headers extends object, Provider extends object | null> extends Communicator<Provider | null> implements IWebCommunicator, IConnector<WebConnector.State> {
    /**
     * @hidden
     */
    private socket_?;
    /**
     * @hidden
     */
    private state_;
    /**
     * Initializer Constructor.
     *
     * @param provider An object providing features for remote system.
     */
    constructor(provider: Provider);
    /**
     * Connect to remote websocket server.
     *
     * Try connection to the remote websocket server with its address and waiting for the
     * server to accept the trial. If the server rejects your connection, then exception
     * would be thrown (in *Promise.catch*, as `WebError`).
     *
     * After the connection and your business has been completed, don't forget to closing the
     * connection in time to prevent waste of the server resource.
     *
     * @param url URL address to connect.
     * @param headers Headers containing initialization data like activation.
     * @param timeout Milliseconds to wait the web-socket server to accept or reject it. If omitted, the waiting would be forever.
     */
    connect(url: string, headers: Headers, timeout?: number): Promise<void>;
    /**
     * @hidden
     */
    private _Wait_connection;
    /**
     * @inheritDoc
     */
    close(code?: number, reason?: string): Promise<void>;
    /**
     * @hidden
     */
    private _Handshake;
    get url(): string | undefined;
    /**
     * @inheritDoc
     */
    get state(): WebConnector.State;
    /**
     * @hidden
     */
    protected sendData(invoke: Invoke): void;
    /**
     * @hidden
     */
    protected inspectReady(method: string): Error | null;
    /**
     * @hidden
     */
    private _Handle_message;
    /**
     * @hidden
     */
    private _Handle_close;
}
export declare namespace WebConnector {
    export import State = IConnector.State;
    var HANDSHAKE_TIMEOUT: number;
}
//# sourceMappingURL=WebConnector.d.ts.map