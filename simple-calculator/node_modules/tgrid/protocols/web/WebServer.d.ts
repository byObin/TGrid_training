import { IServer } from "../internal/IServer";
import { WebAcceptor } from "./WebAcceptor";
/**
 * Web Socket Server.
 *  - available only in NodeJS.
 *
 * The `WebServer` is a class who can open an websocket server. Clients connecting to the
 * `WebServer` would communicate with this server through {@link WebAcceptor} objects using
 * RFC (Remote Function Call).
 *
 * To open the server, call the {@link open}() method with a callback function which would be
 * called whenever a client has been connected.
 *
 * @type Headers Type of headers containing initialization data like activation.
 * @type Provider Type of features provided for remote systems.
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare class WebServer<Headers extends object, Provider extends object | null> implements IServer<WebServer.State> {
    /**
     * @hidden
     */
    private state_;
    /**
     * @hidden
     */
    private options_?;
    /**
     * @hidden
     */
    private server_;
    /**
     * @hidden
     */
    private protocol_;
    /**
     * Default Constructor for the `ws` server..
     *
     * Create an websocket server (`ws://`).
     */
    constructor();
    /**
     * Initializer Constructor for the `wss` server.
     *
     * Create a secured websocket server (`wss://`).
     *
     * @param key Key string.
     * @param cert Certification string.
     */
    constructor(key: string, cert: string);
    /**
     * Open websocket server.
     *
     * @param port Port number to listen.
     * @param handler Callback function for client connection.
     *
     * @todo should be normalized
     */
    open(port: number, handler: WebServer.ConnectionHandler<Headers, Provider>): Promise<void>;
    /**
     * Close server.
     *
     * Close all connections between its remote clients ({@link WebConnector}s).
     *
     * It destories all RFCs (remote function calls) between this server and remote clients
     * (through `Driver<Controller>`) that are not returned (completed) yet. The destruction
     * causes all incompleted RFCs to throw exceptions.
     */
    close(): Promise<void>;
    /**
     * @hidden
     */
    private _Open;
    /**
     * @hidden
     */
    private _Close;
    /**
     * @inheritDoc
     */
    get state(): WebServer.State;
}
export declare namespace WebServer {
    export import State = IServer.State;
    interface ConnectionHandler<Headers extends object, Provider extends object | null> {
        (acceptor: WebAcceptor<Headers, Provider>): Promise<void>;
    }
}
//# sourceMappingURL=WebServer.d.ts.map