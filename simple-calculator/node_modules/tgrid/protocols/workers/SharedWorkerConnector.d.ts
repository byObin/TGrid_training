/** @module tgrid.protocols.workers */
import { Communicator } from "../../components/Communicator";
import { IWorkerSystem } from "./internal/IWorkerSystem";
import { IConnector } from "../internal/IConnector";
import { Invoke } from "../../components/Invoke";
/**
 * SharedWorker Connector
 *  - available only in Web Browser.
 *
 * The `SharedWorkerConnector` is a communicator class, who can connect to an `SharedWorker`
 * instance and communicate with it using RFC (Remote Function Call), considering the
 * `SharedWorker` as a remote system ({@link WorkerServer}).
 *
 * You can connect to an `SharedWorker` instance with {@link connect}() method. If the
 * `SharedWorker` instance does not exist yet, a new `SharedWorker` instance would be newly
 * created. After the creation, you have to let the `SharedWorker` program to open a sever
 * using the {@link SharedWorkerServer.open}() method. Your connection would be linked with
 * a {@link SharedWorkerAcceptor} object in the server.
 *
 * After your business has been completed, you've to close the `SharedWorker` using one of
 * them below. If you don't close that, vulnerable memory usage and communication channel
 * would not be destroyed and it may cause the memory leak:
 *
 *  - {@link close}()
 *  - {@link SharedWorkerAcceptor.close}()
 *  - {@link SharedWorkerServer.close}()
 *
 * @type Headers Type of headers containing initialization data like activation.
 * @type Provider Type of features provided for remote system.
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare class SharedWorkerConnector<Headers extends object, Provider extends object | null> extends Communicator<Provider> implements IWorkerSystem, IConnector<SharedWorkerConnector.State> {
    /**
     * @hidden
     */
    private state_;
    /**
     * @hidden
     */
    private port_?;
    /**
     * Initializer Constructor.
     *
     * @param provider An object providing features (functions & objects) for remote system.
     */
    constructor(provider: Provider);
    /**
     * Connect to remote server.
     *
     * The {@link connect}() method tries to connect an `SharedWorker` instance. If the
     * `SharedWorker` instance is not created yet, the `SharedWorker` instance would be newly
     * created. After the creation, the `SharedWorker` program must open that server using
     * the {@link SharedWorkerServer.open}() method.
     *
     * After you business has been completed, you've to close the `SharedWorker` using one of
     * them below. If you don't close that, vulnerable memory usage and communication channel
     * would not be destroyed and it may cause the memory leak:
     *
     *  - {@link close}()
     *  - {@link ShareDWorkerAcceptor.close}()
     *  - {@link SharedWorkerServer.close}()
     *
     * @param jsFile JS File to be {@link SharedWorkerServer}.
     * @param headers Headers containing initialization data like activation.
     * @param timeout Milliseconds to wait the shared-worker program to open itself. If omitted, the waiting would be forever.
     */
    connect(jsFile: string, headers: Headers, timeout?: number): Promise<void>;
    /**
     * @hidden
     */
    private _Handshake;
    /**
     * @inheritDoc
     */
    close(): Promise<void>;
    /**
     * @inheritDoc
     */
    get state(): SharedWorkerConnector.State;
    /**
     * @hidden
     */
    protected sendData(invoke: Invoke): void;
    /**
     * @hidden
     */
    protected inspectReady(method: string): Error | null;
    /**
     * @hidden
     */
    private _Handle_message;
    /**
     * @hidden
     */
    private _Handle_close;
}
export declare namespace SharedWorkerConnector {
    export import State = IConnector.State;
    /**
     * Compile JS source code.
     *
     * @param content Source code
     * @return Temporary URL.
     */
    function compile(content: string): Promise<string>;
    /**
     * Remove compiled JS file.
     *
     * @param url Temporary URL.
     */
    function remove(url: string): Promise<void>;
}
//# sourceMappingURL=SharedWorkerConnector.d.ts.map