"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedWorkerAcceptor = void 0;
//================================================================ 
/** @module tgrid.protocols.workers */
//================================================================
var Communicator_1 = require("../../components/Communicator");
var IAcceptor_1 = require("../internal/IAcceptor");
var DomainError_1 = require("tstl/exception/DomainError");
/**
 * SharedWorker acceptor for client.
 *  - available only in Web Browser.
 *
 * The `SharedWorkerAcceptor` is a communicator class communicating with the remote client
 * ({@link SharedWorkerConnector}) using RFC (Remote Function Call). The `SharedAcceptor`
 * objects are always created by the {@link SharedWorkerServer} class whenever a remote client
 * connects to its server.
 *
 * To accept connection and start interaction with the remote client, call the {@link accept}()
 * method with special `Provider`. Also, don't forget to closing the connection after your
 * business has been completed.
 *
 * @type Headers Type of headers containing initialization data like activation.
 * @type Provider Type of features provided for remote system.
 * @author Jeongho Nam - https://github.com/samchon
 */
var SharedWorkerAcceptor = /** @class */ (function (_super) {
    __extends(SharedWorkerAcceptor, _super);
    /**
     * @hidden
     */
    function SharedWorkerAcceptor(port, headers, eraser) {
        var _this = _super.call(this, undefined) || this;
        // ASSIGN MEMBER
        _this.port_ = port;
        _this.eraser_ = eraser;
        _this.headers_ = headers;
        // PROPERTIES
        _this.state_ = -1 /* NONE */;
        return _this;
    }
    /* ----------------------------------------------------------------
        CONSTRUCTOR
    ---------------------------------------------------------------- */
    /**
     * @internal
     */
    SharedWorkerAcceptor.create = function (port, headers, eraser) {
        return new SharedWorkerAcceptor(port, headers, eraser);
    };
    /**
     * @inheritDoc
     */
    SharedWorkerAcceptor.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        error = this.inspectReady("SharedWorkerAcceptor.close");
                        if (error)
                            throw error;
                        // CLOSE CONNECTION
                        this.state_ = 2 /* CLOSING */;
                        return [4 /*yield*/, this._Close()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @hidden
     */
    SharedWorkerAcceptor.prototype._Close = function (reason) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // DESTRUCTOR
                        this.eraser_();
                        return [4 /*yield*/, this.destructor()];
                    case 1:
                        _a.sent();
                        // DO CLOSE
                        setTimeout(function () {
                            _this.port_.postMessage(reason === undefined
                                ? 2 /* CLOSING */
                                : JSON.stringify(reason));
                            _this.port_.close();
                        });
                        // WELL, IT MAY HARD TO SEE SUCH PROPERTIES
                        this.state_ = 3 /* CLOSED */;
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(SharedWorkerAcceptor.prototype, "state", {
        /* ----------------------------------------------------------------
            ACCESSORS
        ---------------------------------------------------------------- */
        /**
         * @inheritDoc
         */
        get: function () {
            return this.state_;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SharedWorkerAcceptor.prototype, "headers", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.headers_;
        },
        enumerable: false,
        configurable: true
    });
    /* ----------------------------------------------------------------
        HANDSHAKES
    ---------------------------------------------------------------- */
    /**
     * @inheritDoc
     */
    SharedWorkerAcceptor.prototype.accept = function (provider) {
        if (provider === void 0) { provider = null; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // TEST CONDITION
                if (this.state_ !== -1 /* NONE */)
                    throw new DomainError_1.DomainError("Error on SharedWorkerAcceptor.accept(): you've already accepted (or rejected) the connection.");
                //----
                // ACCEPT CONNECTION
                //----
                this.state_ = 0 /* ACCEPTING */;
                {
                    // SET PROVIDER
                    this.provider_ = provider;
                    // PREPARE PORT
                    this.port_.onmessage = this._Handle_message.bind(this);
                    this.port_.start();
                    // INFORM ACCEPTANCE
                    this.port_.postMessage(1 /* OPEN */);
                }
                this.state_ = 1 /* OPEN */;
                return [2 /*return*/];
            });
        });
    };
    /**
     * Reject connection.
     *
     * Reject without acceptance, any interaction. The connection would be closed immediately.
     *
     * @param reason Detailed reason of the rejection. Default is "Rejected by server".
     */
    SharedWorkerAcceptor.prototype.reject = function (reason) {
        if (reason === void 0) { reason = "Rejected by server"; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // TEST CONDITION
                        if (this.state_ !== -1 /* NONE */)
                            throw new DomainError_1.DomainError("Error on SharedWorkerAcceptor.reject(): you've already accepted (or rejected) the connection.");
                        //----
                        // REJECT CONNECTION (CLOSE)
                        //----
                        this.state_ = -2 /* REJECTING */;
                        return [4 /*yield*/, this._Close({ name: "reject", message: reason })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* ----------------------------------------------------------------
        COMMUNICATOR
    ---------------------------------------------------------------- */
    /**
     * @hidden
     */
    SharedWorkerAcceptor.prototype.sendData = function (invoke) {
        this.port_.postMessage(JSON.stringify(invoke));
    };
    /**
     * @hidden
     */
    SharedWorkerAcceptor.prototype.inspectReady = function (method) {
        return IAcceptor_1.IAcceptor.inspect(this.state_, method);
    };
    /**
     * @hidden
     */
    SharedWorkerAcceptor.prototype._Handle_message = function (evt) {
        if (evt.data === 2 /* CLOSING */)
            this.close();
        else
            this.replyData(JSON.parse(evt.data));
    };
    return SharedWorkerAcceptor;
}(Communicator_1.Communicator));
exports.SharedWorkerAcceptor = SharedWorkerAcceptor;
(function (SharedWorkerAcceptor) {
})(SharedWorkerAcceptor = exports.SharedWorkerAcceptor || (exports.SharedWorkerAcceptor = {}));
exports.SharedWorkerAcceptor = SharedWorkerAcceptor;
//# sourceMappingURL=SharedWorkerAcceptor.js.map