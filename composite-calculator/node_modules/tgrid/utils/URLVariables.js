"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.URLVariables = void 0;
//================================================================ 
/** @module tgrid.utils */
//================================================================
var Dictionary_1 = require("./internal/Dictionary");
var comparators_1 = require("tstl/functional/comparators");
/**
 * URLVariables class is for representing variables of HTTP.
 *
 * The `URLVariables` class allows you to transfer variables between an application and server.
 *
 * When transfering, the `URLVariables` should be converted to a *URI* string through {@link toString}().
 * - URI: Uniform Resource Identifier
 *
 * @reference http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/net/URLVariables.html
 * @author Migrated by Jeongho Nam - https://github.com/samchon
 */
var URLVariables = /** @class */ (function (_super) {
    __extends(URLVariables, _super);
    function URLVariables(str) {
        if (str === void 0) { str = ""; }
        var _this = _super.call(this) || this;
        if (str !== "")
            _this._Parse(str);
        return _this;
    }
    /**
     * @hidden
     */
    URLVariables.prototype._Parse = function (str) {
        var e_1, _a;
        this.clear();
        if (str.trim() === "")
            return;
        if (str.indexOf("?") !== -1)
            str = str.substr(str.indexOf("?") + 1);
        if (str.indexOf("#") !== -1)
            str = str.substr(0, str.indexOf("#"));
        var elements = str.split("&");
        try {
            for (var elements_1 = __values(elements), elements_1_1 = elements_1.next(); !elements_1_1.done; elements_1_1 = elements_1.next()) {
                var pair = elements_1_1.value;
                var equal_index = pair.indexOf("=");
                var key = void 0;
                var value = void 0;
                if (equal_index === -1) {
                    key = pair;
                    value = "";
                }
                else {
                    key = pair.substr(0, equal_index);
                    value = decodeURIComponent(pair.substr(equal_index + 1));
                }
                this.emplace(key, value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (elements_1_1 && !elements_1_1.done && (_a = elements_1.return)) _a.call(elements_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Returns a string containing all enumerable variables, in the MIME content encoding application/x-www-form-urlencoded.
     */
    URLVariables.prototype.toString = function () {
        var str = "";
        for (var it = this.begin(); !it.equals(this.end()); it = it.next()) {
            if (comparators_1.not_equal_to(it, this.begin()))
                str += "&";
            str += it.first;
            if (it.second !== "")
                str += "=" + encodeURIComponent(it.second);
        }
        return str;
    };
    URLVariables.prototype.toJSON = function () {
        return this.toString();
    };
    return URLVariables;
}(Dictionary_1.Dictionary));
exports.URLVariables = URLVariables;
(function (URLVariables) {
    function parse(str, autoCase) {
        var e_2, _a;
        if (autoCase === void 0) { autoCase = true; }
        var variables = new URLVariables(str);
        var ret = {};
        try {
            for (var variables_1 = __values(variables), variables_1_1 = variables_1.next(); !variables_1_1.done; variables_1_1 = variables_1.next()) {
                var entry = variables_1_1.value;
                if (!autoCase || entry.second === "") {
                    ret[entry.first] = entry.second;
                    continue;
                }
                if (entry.second.length === 0)
                    ret[entry.first] = true;
                else if (entry.second === "true" || entry.second === "false")
                    ret[entry.first] = (entry.second === "true");
                else if (Number.isNaN(Number(entry.second)) === false)
                    ret[entry.first] = Number(entry.second);
                else
                    ret[entry.first] = entry.second;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (variables_1_1 && !variables_1_1.done && (_a = variables_1.return)) _a.call(variables_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return ret;
    }
    URLVariables.parse = parse;
    function stringify(obj) {
        if (typeof obj === "boolean" || typeof obj === "number")
            return String(obj);
        else if (typeof obj === "string")
            return obj;
        else if (obj instanceof URLVariables)
            return obj.toString();
        var variables = new URLVariables();
        for (var key in obj)
            variables.set(key, String(obj[key]));
        return variables.toString();
    }
    URLVariables.stringify = stringify;
})(URLVariables = exports.URLVariables || (exports.URLVariables = {}));
exports.URLVariables = URLVariables;
//# sourceMappingURL=URLVariables.js.map