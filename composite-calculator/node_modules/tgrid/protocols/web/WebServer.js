"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebServer = void 0;
//================================================================ 
/** @module tgrid.protocols.web */
//================================================================
var http = require("http");
var https = require("https");
var WebSocket = require("ws");
var DomainError_1 = require("tstl/exception/DomainError");
var RuntimeError_1 = require("tstl/exception/RuntimeError");
var WebAcceptor_1 = require("./WebAcceptor");
/**
 * Web Socket Server.
 *  - available only in NodeJS.
 *
 * The `WebServer` is a class who can open an websocket server. Clients connecting to the
 * `WebServer` would communicate with this server through {@link WebAcceptor} objects using
 * RFC (Remote Function Call).
 *
 * To open the server, call the {@link open}() method with a callback function which would be
 * called whenever a client has been connected.
 *
 * @type Headers Type of headers containing initialization data like activation.
 * @type Provider Type of features provided for remote systems.
 * @author Jeongho Nam - https://github.com/samchon
 */
var WebServer = /** @class */ (function () {
    function WebServer(key, cert) {
        // PREPARE SREVER INSTANCE
        if (key) {
            this.options_ = ({ key: key, cert: cert });
            this.server_ = https.createServer(this.options_);
        }
        else
            this.server_ = http.createServer();
        // INITIALIZE STATUS & PROTOCOL
        this.state_ = -1 /* NONE */;
        this.protocol_ = new WebSocket.Server({ noServer: true });
    }
    /**
     * Open websocket server.
     *
     * @param port Port number to listen.
     * @param handler Callback function for client connection.
     *
     * @todo should be normalized
     */
    WebServer.prototype.open = function (port, handler) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        //----
                        // PRELIMINARIES
                        //----
                        // POSSIBLE TO OPEN?
                        if (this.state_ === 1 /* OPEN */)
                            throw new DomainError_1.DomainError("Error on WebServer.open(): it has already been opened.");
                        else if (this.state_ === 0 /* OPENING */)
                            throw new DomainError_1.DomainError("Error on WebServer.open(): it's on opening, wait for a second.");
                        else if (this.state_ === 2 /* CLOSING */)
                            throw new RuntimeError_1.RuntimeError("Error on WebServer.open(): it's on closing.");
                        // RE-OPEN ?
                        else if (this.state_ === 3 /* CLOSED */)
                            this.server_ = this.server_ instanceof http.Server
                                ? http.createServer()
                                : https.createServer(this.options_);
                        // SET STATE
                        this.state_ = 0 /* OPENING */;
                        //----
                        // OPEN SERVER
                        //----
                        // PROTOCOL - ADAPTOR & ACCEPTOR
                        this.server_.on("upgrade", function (request, netSocket, header) {
                            _this.protocol_.handleUpgrade(request, netSocket, header, function (webSocket) {
                                webSocket.once("message", function (data) { return __awaiter(_this, void 0, void 0, function () {
                                    var headers, acceptor, exp_1;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                // @todo: custom code is required
                                                if (typeof data !== "string")
                                                    webSocket.close();
                                                _a.label = 1;
                                            case 1:
                                                _a.trys.push([1, 3, , 4]);
                                                headers = JSON.parse(data);
                                                acceptor = WebAcceptor_1.WebAcceptor.create(request, webSocket, headers);
                                                return [4 /*yield*/, handler(acceptor)];
                                            case 2:
                                                _a.sent();
                                                return [3 /*break*/, 4];
                                            case 3:
                                                exp_1 = _a.sent();
                                                webSocket.close();
                                                return [3 /*break*/, 4];
                                            case 4: return [2 /*return*/];
                                        }
                                    });
                                }); });
                            });
                        });
                        // FINALIZATION
                        return [4 /*yield*/, this._Open(port)];
                    case 1:
                        // FINALIZATION
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Close server.
     *
     * Close all connections between its remote clients ({@link WebConnector}s).
     *
     * It destories all RFCs (remote function calls) between this server and remote clients
     * (through `Driver<Controller>`) that are not returned (completed) yet. The destruction
     * causes all incompleted RFCs to throw exceptions.
     */
    WebServer.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // VALIDATION
                        if (this.state_ !== 1 /* OPEN */)
                            throw new DomainError_1.DomainError("Error on WebServer.close(): server is not opened.");
                        // DO CLOSE
                        this.state_ = 2 /* CLOSING */;
                        return [4 /*yield*/, this._Close()];
                    case 1:
                        _a.sent();
                        this.state_ = 3 /* CLOSED */;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @hidden
     */
    WebServer.prototype._Open = function (port) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            // PREPARE RETURNS
            _this.server_.on("listening", function () {
                _this.state_ = 1 /* OPEN */;
                _this.server_.on("error", function () { });
                resolve();
            });
            _this.server_.on("error", function (error) {
                _this.state_ = -1 /* NONE */;
                reject(error);
            });
            // DO OPEN - START PROVIDE
            _this.server_.listen(port);
        });
    };
    /**
     * @hidden
     */
    WebServer.prototype._Close = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.server_.close(function () {
                // BE CLOSED
                _this.state_ = 3 /* CLOSED */;
                resolve();
            });
        });
    };
    Object.defineProperty(WebServer.prototype, "state", {
        /* ----------------------------------------------------------------
            ACCESSORS
        ---------------------------------------------------------------- */
        /**
         * @inheritDoc
         */
        get: function () {
            return this.state_;
        },
        enumerable: false,
        configurable: true
    });
    return WebServer;
}());
exports.WebServer = WebServer;
(function (WebServer) {
})(WebServer = exports.WebServer || (exports.WebServer = {}));
exports.WebServer = WebServer;
//# sourceMappingURL=WebServer.js.map