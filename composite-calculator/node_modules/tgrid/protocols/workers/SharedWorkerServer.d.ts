/** @module tgrid.protocols.workers */
import { IServer } from "../internal/IServer";
import { SharedWorkerAcceptor } from "./SharedWorkerAcceptor";
/**
 * SharedWorker server.
 *  - available only in Web Browser.
 *
 * The `SharedWorkerServer` is a class representing a server server in a `SharedWorker`
 * environment. Clients connecting to the `SharedWorkerServer` would communicate with this
 * server through {@link SharedWorkerAcceptor} objects using RFC (Remote Function Call).
 *
 * To open the server, use the {@link open}() method with a callback function which would be
 * called whenever a client has been connected. After your business, don't forget to closing
 * the connection using one of them below. If you don't close that, vulnerable memory usage
 * and communication channel would not be destroyed and it may cause the memory leak.
 *
 *  - {@link close}()
 *  - {@link SharedWorkerAcceptor.close}()
 *  - {@link SharedWorkerConnector.close}()
 *
 * @type Headers Type of headers containing initialization data like activation.
 * @type Provider Type of features provided for remote system.
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare class SharedWorkerServer<Headers extends object, Provider extends object | null> implements IServer<SharedWorkerServer.State> {
    /**
     * @hidden
     */
    private state_;
    /**
     * @hidden
     */
    private acceptors_;
    /**
     * Default Constructor.
     */
    constructor();
    /**
     * Open server.
     *
     * @param handler Callback function called whenever client connects.
     */
    open(handler: (acceptor: SharedWorkerAcceptor<Headers, Provider>) => any): Promise<void>;
    /**
     * Close server.
     *
     * Close all connections between its remote clients ({@link SharedWorkerConnector}s).
     *
     * It destories all RFCs (remote function calls) between this server and remote clients
     * (through `Driver<Controller>`) that are not returned (completed) yet. The destruction
     * causes all incompleted RFCs to throw exceptions.
     */
    close(): Promise<void>;
    /**
     * @hidden
     */
    private _Handle_connect;
    /**
     * @inheritDoc
     */
    get state(): SharedWorkerServer.State;
}
export declare namespace SharedWorkerServer {
    export import State = IServer.State;
}
//# sourceMappingURL=SharedWorkerServer.d.ts.map