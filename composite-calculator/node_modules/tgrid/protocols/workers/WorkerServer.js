"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkerServer = void 0;
//================================================================ 
/** @module tgrid.protocols.workers */
//================================================================
var Communicator_1 = require("../../components/Communicator");
var once_1 = require("../internal/once");
var DomainError_1 = require("tstl/exception/DomainError");
var RuntimeError_1 = require("tstl/exception/RuntimeError");
var Singleton_1 = require("tstl/thread/Singleton");
var global_1 = require("tstl/thread/global");
var node_1 = require("tstl/utility/node");
/**
 * Worker Server.
 *
 * The `WorkerServer` is a class representing a `Worker` server who can communicate with
 * remote client, parent and creator of the `Worker` (anyway {@link WorkerConnector}), using
 * RFC (Remote Function Call).
 *
 * Unlike other servers, `WorkerServer` can accept only a client ({@link WorkerConnector})
 * because the worker is dependent on its parent instance (web page, node or parent worker).
 * Thus, `WorkerServer` does not have any acceptor and communicates with client (its parent)
 * by itself.
 *
 * To start communication with the remote client, call the {@link open}() method with special
 * `Provider`. After your business, don't forget terminating this worker using {@link close}()
 * or {@link WorkerConnector.close}() method. If you don't terminate it, then vulnerable
 * memory and communication channel would be kept and it may cause the memory leak.
 *
 * @type Headers Type of headers containing initialization data like activation.
 * @type Provider Type of features provided for remote system.
 * @author Jeongho Nam - https://github.com/samchon
 */
var WorkerServer = /** @class */ (function (_super) {
    __extends(WorkerServer, _super);
    /* ----------------------------------------------------------------
        CONSTRUCTOR
    ---------------------------------------------------------------- */
    /**
     * Default Constructor.
     */
    function WorkerServer() {
        var _this = _super.call(this, undefined) || this;
        _this.state_ = -1 /* NONE */;
        _this.headers_ = new Singleton_1.Singleton(function () { return __awaiter(_this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        g.postMessage(0 /* OPENING */);
                        return [4 /*yield*/, this._Handshake("getHeaders")];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, JSON.parse(data)];
                }
            });
        }); });
        return _this;
    }
    /**
     * Open server with `Provider`.
     *
     * Open worker server and start communication with the remote system
     * ({@link WorkerConnector}).
     *
     * Note that, after your business, you should terminate this worker to prevent waste
     * of memory leak. Close this worker by yourself ({@link close}) or let remote client to
     * close this worker ({@link WorkerConnector.close}).
     *
     * @param provider An object providing featrues for the remote system.
     */
    WorkerServer.prototype.open = function (provider) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // TEST CONDITION
                        if (node_1.is_node() === false) {
                            if (self.document !== undefined)
                                throw new DomainError_1.DomainError("Error on WorkerServer.open(): this is not Worker.");
                        }
                        else if (global.process.send === undefined)
                            throw new DomainError_1.DomainError("Error on WorkerServer.open(): this is not Child Process.");
                        else if (this.state_ !== -1 /* NONE */)
                            throw new DomainError_1.DomainError("Error on WorkerServer.open(): the server has been opened yet.");
                        // OPEN WORKER
                        this.state_ = 0 /* OPENING */;
                        this.provider_ = provider;
                        // GET HEADERS
                        return [4 /*yield*/, this.headers_.get()];
                    case 1:
                        // GET HEADERS
                        _a.sent();
                        // SUCCESS
                        g.onmessage = this._Handle_message.bind(this);
                        g.postMessage(1 /* OPEN */);
                        this.state_ = 1 /* OPEN */;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @inheritDoc
     */
    WorkerServer.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        error = this.inspectReady();
                        if (error)
                            throw error;
                        //----
                        // CLOSE WORKER
                        //----
                        this.state_ = 2 /* CLOSING */;
                        // HANDLERS
                        return [4 /*yield*/, this.destructor()];
                    case 1:
                        // HANDLERS
                        _a.sent();
                        // DO CLOSE
                        setTimeout(function () {
                            g.postMessage(2 /* CLOSING */);
                            g.close();
                        });
                        this.state_ = 3 /* CLOSED */;
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(WorkerServer.prototype, "state", {
        /* ----------------------------------------------------------------
            ACCESSORS
        ---------------------------------------------------------------- */
        /**
         * @inheritDoc
         */
        get: function () {
            return this.state_;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Headers containing initialization data like activation.
     */
    WorkerServer.prototype.getHeaders = function () {
        return this.headers_.get();
    };
    /**
     * @hidden
     */
    WorkerServer.prototype._Handshake = function (method, timeout, until) {
        return new Promise(function (resolve, reject) {
            var completed = false;
            var expired = false;
            if (until !== undefined)
                global_1.sleep_until(until).then(function () {
                    if (completed === false) {
                        reject(new DomainError_1.DomainError("Error on WorkerConnector." + method + "(): target worker is not sending handshake data over " + timeout + " milliseconds."));
                        expired = true;
                    }
                });
            g.onmessage = once_1.once(function (evt) {
                if (expired === false) {
                    completed = true;
                    resolve(evt.data);
                }
            });
        });
    };
    /* ----------------------------------------------------------------
        COMMUNICATOR
    ---------------------------------------------------------------- */
    /**
     * @hidden
     */
    WorkerServer.prototype.sendData = function (invoke) {
        g.postMessage(JSON.stringify(invoke));
    };
    /**
     * @hidden
     */
    WorkerServer.prototype.inspectReady = function () {
        // NO ERROR
        if (this.state_ === 1 /* OPEN */)
            return null;
        // ERROR, ONE OF THEM
        else if (this.state_ === -1 /* NONE */)
            return new DomainError_1.DomainError("Server is not opened yet.");
        else if (this.state_ === 0 /* OPENING */)
            return new DomainError_1.DomainError("Server is on opening; wait for a sec.");
        else if (this.state_ === 2 /* CLOSING */)
            return new RuntimeError_1.RuntimeError("Server is on closing.");
        // MAY NOT BE OCCURED
        else if (this.state_ === 3 /* CLOSED */)
            return new RuntimeError_1.RuntimeError("The server has been closed.");
        else
            return new RuntimeError_1.RuntimeError("Unknown error, but not connected.");
    };
    /**
     * @hidden
     */
    WorkerServer.prototype._Handle_message = function (evt) {
        if (evt.data === 2 /* CLOSING */)
            this.close();
        else
            this.replyData(JSON.parse(evt.data));
    };
    return WorkerServer;
}(Communicator_1.Communicator));
exports.WorkerServer = WorkerServer;
(function (WorkerServer) {
})(WorkerServer = exports.WorkerServer || (exports.WorkerServer = {}));
exports.WorkerServer = WorkerServer;
//----
// POLYFILL
//----
/**
 * @hidden
 */
var g = node_1.is_node()
    ? require("./internal/worker-server-polyfill")
    : self;
//# sourceMappingURL=WorkerServer.js.map